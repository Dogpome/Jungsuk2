package ch06객체지향언어;

public class ch_메서드속성 {
    // 메서드는?
    // 펑션을 자바에서 부르는 말, c나 파이선 같은 애들도 펑션이라고함.
    // 자바는 클래스 기반으로 객체지향 언어로 태어났기 때문에
    // 클래스에 있는 펑션으로 부름 때문에 메서드라 부름
    // 펑션 = 메서드 임 -- 개발자 사이에서 통용됨.

    // 인스턴스화 시킨다는 것은?
    // ssd에 레데리2를 깐다(public class ch_메서드속성 이라는 클래스를 만들고
    // -> 레데리2를 실행시킨다(new ch_메서드속성();)
    // --> 레데리2에 어떤 마을을 감(plus)를 실행시키면 얘가 동작하는 것임.
    // --> 지역이동할 때마다 로딩 뜨는 것이 이 메서드가 실행되는 것임.

    private void plus(int value1, int value2) {
        System.out.println(value1+value2);
    }
    // 객체지향 개념 -- 더 하는 기능을 만들어놓았다.


    public static void main(String[] args) {
        // psvm을 깔아놓으면 실행 안됨.
        // 클래스가 static이 아니기 때문에 static에서 실행하려면
        // 매서드를 static으로 만들든지, 위에넘을 인스턴스화시켜주면됨.
        // 이 클래스 안에 있는 메서드 plus를 불러줄 것임.
        ch_메서드속성 ch_메서드속성 = new ch_메서드속성();
        // 클래스를 인스턴스화 한다는 것은?
        // new를 안해주면 코드로 되어있음,
        // 이 코드를 메모리로 만들어줘야 쓸 수 있으니
        // new를 붙여 인스턴스화를 시킨다.
        // 코드를 메모리로 만드는 작업.
        ch_메서드속성.plus(10,20);

    }

    // 같은 클래스에서만 부를꺼니까 접근제어자 private 사용함.
    // return 값을 안 부를거니까 void를 사용함??
    // plus 라는 애를 매개변수를 선언한다. 총 두 가지.
    // 타입은 int로 받을것임. { } 안에 들어있는 애들이 실행 될 것이야.

}
