package ch06객체지향언어;

public class ch06_14메서드란 {
    // 메서드란?
    // 1. 문장들을 묶어놓은 것.
    // -- 작업단위로 문장들을 묶어서 이름 붙인 것.
    // 2. 값(입력)을 받아서 처리하고, 결과를 반환(출력)

    // int(반환타입) add(변수이름)(int x, int y)[매개변수]
    // {int result = x+y;
    // return result; // 결과를 반환

    // 함수 : 상자 함, 수 -> 매서드와 함수는 같은 말임.
    // 메서드는 반드시 클래스 안에 있어야함.
    // 함수는 클래스에 독립적임.
    // 근본적으로는 같은 개념이야.
    // println("Hello world") <- 프린트엘엔같은 애들이 매서드임.

    // 6-14 메서드의 장점
    // 1. 코드의 중복을 줄일 수 있어.
    // 2. 코드의 관리가 쉽다
    // 3. 코드를 재사용할 수 있다
    // 4. 코드가 간결해서 이해하기 쉬워진다.

    // 하나의 매서드는 한 가지 기능만 수행하도록 작성해라.
    // 하나로 묶을 수 있지만 각각 만들라.

    // 6-14 메서드란?
    // 메서드 = 선언부 + 구현부
    // 반환타입 매서드이름 (타입 변수명, 타입 변수명)[매개변수임] <- 선언부
    // {메서드 호출시 수행될 코드 } < - 구현부다.

    // 선언하고 구현하면 된다.
    // int add(int 3, int 5) <- add라는 메서드를 선언, 입력값 두 개
    // {int result = 3 + 5; return result;  } <- 구현부임
    // 호출한 메서드로 결과를 반환

    // 코드의 중복은 반드시 제거해야함. // 게다가 간결함
    // 어떤 작업을 수행하는 지시 문장.
    // printArr(numArr); // 배열을 출력.
    //

    // 6-15 메서드의 구현부
    // 지역변수(lv) : 메스드 내에 선언된 변수.

    public static void main(String[] args) {
        int x = 20;
        int y = 30;
        int z = 40;

        System.out.println(x+y+z);

        // 1+2-50

    }

}
